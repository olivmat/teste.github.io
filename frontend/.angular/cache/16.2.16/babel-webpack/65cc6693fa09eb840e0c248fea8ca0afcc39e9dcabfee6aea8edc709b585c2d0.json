{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, NgModule } from '@angular/core';\nimport { startWith } from 'rxjs/operators';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nclass MatLine {\n  static ɵfac = function MatLine_Factory(t) {\n    return new (t || MatLine)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLine,\n    selectors: [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]],\n    hostAttrs: [1, \"mat-line\"],\n    standalone: true\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLine, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-line], [matLine]',\n      host: {\n        'class': 'mat-line'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({\n    length\n  }) => {\n    setClass(element, `${prefix}-2-line`, false);\n    setClass(element, `${prefix}-3-line`, false);\n    setClass(element, `${prefix}-multi-line`, false);\n    if (length === 2 || length === 3) {\n      setClass(element, `${prefix}-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `${prefix}-multi-line`, true);\n    }\n  });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n  element.nativeElement.classList.toggle(className, isAdd);\n}\nclass MatLineModule {\n  static ɵfac = function MatLineModule_Factory(t) {\n    return new (t || MatLineModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatLineModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatCommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLineModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatLine],\n      exports: [MatLine, MatCommonModule]\n    }]\n  }], null, null);\n})();\nexport { MatLine as M, MatLineModule as a, setLines as s };","map":{"version":3,"names":["i0","Directive","NgModule","startWith","M","MatCommonModule","MatLine","ɵfac","MatLine_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","standalone","ngDevMode","ɵsetClassMetadata","args","selector","host","setLines","lines","element","prefix","changes","pipe","subscribe","length","setClass","className","isAdd","nativeElement","classList","toggle","MatLineModule","MatLineModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","a","s"],"sources":["C:/Users/mathe/Documents/Kids/Cadastro Local Kids/node_modules/@angular/material/fesm2022/line-Bz5f9Cyx.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, NgModule } from '@angular/core';\nimport { startWith } from 'rxjs/operators';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nclass MatLine {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatLine, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatLine, isStandalone: true, selector: \"[mat-line], [matLine]\", host: { classAttribute: \"mat-line\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatLine, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-line], [matLine]',\n                    host: { 'class': 'mat-line' },\n                }]\n        }] });\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n    // Note: doesn't need to unsubscribe, because `changes`\n    // gets completed by Angular when the view is destroyed.\n    lines.changes.pipe(startWith(lines)).subscribe(({ length }) => {\n        setClass(element, `${prefix}-2-line`, false);\n        setClass(element, `${prefix}-3-line`, false);\n        setClass(element, `${prefix}-multi-line`, false);\n        if (length === 2 || length === 3) {\n            setClass(element, `${prefix}-${length}-line`, true);\n        }\n        else if (length > 3) {\n            setClass(element, `${prefix}-multi-line`, true);\n        }\n    });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n    element.nativeElement.classList.toggle(className, isAdd);\n}\nclass MatLineModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatLineModule, imports: [MatCommonModule, MatLine], exports: [MatLine, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatLineModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatLineModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatLine],\n                    exports: [MatLine, MatCommonModule],\n                }]\n        }] });\n\nexport { MatLine as M, MatLineModule as a, setLines as s };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AACnD,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,CAAC,IAAIC,eAAe,QAAQ,8BAA8B;;AAEnE;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,CAAC;EACV,OAAOC,IAAI,YAAAC,gBAAAC,CAAA;IAAA,YAAAA,CAAA,IAAwFH,OAAO;EAAA;EAC1G,OAAOI,IAAI,kBAD8EV,EAAE,CAAAW,iBAAA;IAAAC,IAAA,EACJN,OAAO;IAAAO,SAAA;IAAAC,SAAA;IAAAC,UAAA;EAAA;AAClG;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAH6FhB,EAAE,CAAAiB,iBAAA,CAGJX,OAAO,EAAc,CAAC;IACrGM,IAAI,EAAEX,SAAS;IACfiB,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,uBAAuB;MACjCC,IAAI,EAAE;QAAE,OAAO,EAAE;MAAW;IAChC,CAAC;EACT,CAAC,CAAC;AAAA;AACV;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,KAAK,EAAEC,OAAO,EAAEC,MAAM,GAAG,KAAK,EAAE;EAC9C;EACA;EACAF,KAAK,CAACG,OAAO,CAACC,IAAI,CAACvB,SAAS,CAACmB,KAAK,CAAC,CAAC,CAACK,SAAS,CAAC,CAAC;IAAEC;EAAO,CAAC,KAAK;IAC3DC,QAAQ,CAACN,OAAO,EAAG,GAAEC,MAAO,SAAQ,EAAE,KAAK,CAAC;IAC5CK,QAAQ,CAACN,OAAO,EAAG,GAAEC,MAAO,SAAQ,EAAE,KAAK,CAAC;IAC5CK,QAAQ,CAACN,OAAO,EAAG,GAAEC,MAAO,aAAY,EAAE,KAAK,CAAC;IAChD,IAAII,MAAM,KAAK,CAAC,IAAIA,MAAM,KAAK,CAAC,EAAE;MAC9BC,QAAQ,CAACN,OAAO,EAAG,GAAEC,MAAO,IAAGI,MAAO,OAAM,EAAE,IAAI,CAAC;IACvD,CAAC,MACI,IAAIA,MAAM,GAAG,CAAC,EAAE;MACjBC,QAAQ,CAACN,OAAO,EAAG,GAAEC,MAAO,aAAY,EAAE,IAAI,CAAC;IACnD;EACJ,CAAC,CAAC;AACN;AACA;AACA,SAASK,QAAQA,CAACN,OAAO,EAAEO,SAAS,EAAEC,KAAK,EAAE;EACzCR,OAAO,CAACS,aAAa,CAACC,SAAS,CAACC,MAAM,CAACJ,SAAS,EAAEC,KAAK,CAAC;AAC5D;AACA,MAAMI,aAAa,CAAC;EAChB,OAAO5B,IAAI,YAAA6B,sBAAA3B,CAAA;IAAA,YAAAA,CAAA,IAAwF0B,aAAa;EAAA;EAChH,OAAOE,IAAI,kBAnC8ErC,EAAE,CAAAsC,gBAAA;IAAA1B,IAAA,EAmCSuB;EAAa;EACjH,OAAOI,IAAI,kBApC8EvC,EAAE,CAAAwC,gBAAA;IAAAC,OAAA,GAoCkCpC,eAAe,EAAEA,eAAe;EAAA;AACjK;AACA;EAAA,QAAAW,SAAA,oBAAAA,SAAA,KAtC6FhB,EAAE,CAAAiB,iBAAA,CAsCJkB,aAAa,EAAc,CAAC;IAC3GvB,IAAI,EAAEV,QAAQ;IACdgB,IAAI,EAAE,CAAC;MACCuB,OAAO,EAAE,CAACpC,eAAe,EAAEC,OAAO,CAAC;MACnCoC,OAAO,EAAE,CAACpC,OAAO,EAAED,eAAe;IACtC,CAAC;EACT,CAAC,CAAC;AAAA;AAEV,SAASC,OAAO,IAAIF,CAAC,EAAE+B,aAAa,IAAIQ,CAAC,EAAEtB,QAAQ,IAAIuB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}