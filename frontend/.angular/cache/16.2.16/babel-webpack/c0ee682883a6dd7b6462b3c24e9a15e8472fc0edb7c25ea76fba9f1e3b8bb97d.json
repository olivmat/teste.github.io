{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injectable, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\nconst MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n  providedIn: 'root',\n  factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n  return {\n    useUtc: false\n  };\n}\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\nclass MomentDateAdapter extends DateAdapter {\n  _options = inject(MAT_MOMENT_DATE_ADAPTER_OPTIONS, {\n    optional: true\n  });\n  // Note: all of the methods that accept a `Moment` input parameter immediately call `this.clone`\n  // on it. This is to ensure that we're working with a `Moment` that has the correct locale setting\n  // while avoiding mutating the original object passed to us. Just calling `.locale(...)` on the\n  // input would mutate the object.\n  _localeData;\n  constructor() {\n    super();\n    const dateLocale = inject(MAT_DATE_LOCALE, {\n      optional: true\n    });\n    this.setLocale(dateLocale || moment.locale());\n  }\n  setLocale(locale) {\n    super.setLocale(locale);\n    let momentLocaleData = moment.localeData(locale);\n    this._localeData = {\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n      longMonths: momentLocaleData.months(),\n      shortMonths: momentLocaleData.monthsShort(),\n      dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n      longDaysOfWeek: momentLocaleData.weekdays(),\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n    };\n  }\n  getYear(date) {\n    return this.clone(date).year();\n  }\n  getMonth(date) {\n    return this.clone(date).month();\n  }\n  getDate(date) {\n    return this.clone(date).date();\n  }\n  getDayOfWeek(date) {\n    return this.clone(date).day();\n  }\n  getMonthNames(style) {\n    // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n    return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n  }\n  getDateNames() {\n    return this._localeData.dates;\n  }\n  getDayOfWeekNames(style) {\n    if (style == 'long') {\n      return this._localeData.longDaysOfWeek;\n    }\n    if (style == 'short') {\n      return this._localeData.shortDaysOfWeek;\n    }\n    return this._localeData.narrowDaysOfWeek;\n  }\n  getYearName(date) {\n    return this.clone(date).format('YYYY');\n  }\n  getFirstDayOfWeek() {\n    return this._localeData.firstDayOfWeek;\n  }\n  getNumDaysInMonth(date) {\n    return this.clone(date).daysInMonth();\n  }\n  clone(date) {\n    return date.clone().locale(this.locale);\n  }\n  createDate(year, month, date) {\n    // Moment.js will create an invalid date if any of the components are out of bounds, but we\n    // explicitly check each case so we can throw more descriptive errors.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n    const result = this._createMoment({\n      year,\n      month,\n      date\n    }).locale(this.locale);\n    // If the result isn't valid, the date must have been out of bounds for this month.\n    if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n    return result;\n  }\n  today() {\n    return this._createMoment().locale(this.locale);\n  }\n  parse(value, parseFormat) {\n    if (value && typeof value == 'string') {\n      return this._createMoment(value, parseFormat, this.locale);\n    }\n    return value ? this._createMoment(value).locale(this.locale) : null;\n  }\n  format(date, displayFormat) {\n    date = this.clone(date);\n    if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('MomentDateAdapter: Cannot format invalid date.');\n    }\n    return date.format(displayFormat);\n  }\n  addCalendarYears(date, years) {\n    return this.clone(date).add({\n      years\n    });\n  }\n  addCalendarMonths(date, months) {\n    return this.clone(date).add({\n      months\n    });\n  }\n  addCalendarDays(date, days) {\n    return this.clone(date).add({\n      days\n    });\n  }\n  toIso8601(date) {\n    return this.clone(date).format();\n  }\n  /**\n   * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n   * string into null. Returns an invalid date for all other values.\n   */\n  deserialize(value) {\n    let date;\n    if (value instanceof Date) {\n      date = this._createMoment(value).locale(this.locale);\n    } else if (this.isDateInstance(value)) {\n      // Note: assumes that cloning also sets the correct locale.\n      return this.clone(value);\n    }\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n    }\n    if (date && this.isValid(date)) {\n      return this._createMoment(date).locale(this.locale);\n    }\n    return super.deserialize(value);\n  }\n  isDateInstance(obj) {\n    return moment.isMoment(obj);\n  }\n  isValid(date) {\n    return this.clone(date).isValid();\n  }\n  invalid() {\n    return moment.invalid();\n  }\n  setTime(target, hours, minutes, seconds) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (hours < 0 || hours > 23) {\n        throw Error(`Invalid hours \"${hours}\". Hours value must be between 0 and 23.`);\n      }\n      if (minutes < 0 || minutes > 59) {\n        throw Error(`Invalid minutes \"${minutes}\". Minutes value must be between 0 and 59.`);\n      }\n      if (seconds < 0 || seconds > 59) {\n        throw Error(`Invalid seconds \"${seconds}\". Seconds value must be between 0 and 59.`);\n      }\n    }\n    return this.clone(target).set({\n      hours,\n      minutes,\n      seconds,\n      milliseconds: 0\n    });\n  }\n  getHours(date) {\n    return date.hours();\n  }\n  getMinutes(date) {\n    return date.minutes();\n  }\n  getSeconds(date) {\n    return date.seconds();\n  }\n  parseTime(value, parseFormat) {\n    return this.parse(value, parseFormat);\n  }\n  addSeconds(date, amount) {\n    return this.clone(date).add({\n      seconds: amount\n    });\n  }\n  /** Creates a Moment instance while respecting the current UTC settings. */\n  _createMoment(date, format, locale) {\n    const {\n      strict,\n      useUtc\n    } = this._options || {};\n    return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n  }\n  static ɵfac = function MomentDateAdapter_Factory(t) {\n    return new (t || MomentDateAdapter)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MomentDateAdapter,\n    factory: MomentDateAdapter.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MomentDateAdapter, [{\n    type: Injectable\n  }], () => [], null);\n})();\nconst MAT_MOMENT_DATE_FORMATS = {\n  parse: {\n    dateInput: 'l',\n    timeInput: 'LT'\n  },\n  display: {\n    dateInput: 'l',\n    timeInput: 'LT',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n    timeOptionLabel: 'LT'\n  }\n};\nclass MomentDateModule {\n  static ɵfac = function MomentDateModule_Factory(t) {\n    return new (t || MomentDateModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MomentDateModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: DateAdapter,\n      useClass: MomentDateAdapter,\n      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n    }]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MomentDateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: DateAdapter,\n        useClass: MomentDateAdapter,\n        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n      }]\n    }]\n  }], null, null);\n})();\nclass MatMomentDateModule {\n  static ɵfac = function MatMomentDateModule_Factory(t) {\n    return new (t || MatMomentDateModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatMomentDateModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideMomentDateAdapter()]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMomentDateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [provideMomentDateAdapter()]\n    }]\n  }], null, null);\n})();\nfunction provideMomentDateAdapter(formats = MAT_MOMENT_DATE_FORMATS, options) {\n  const providers = [{\n    provide: DateAdapter,\n    useClass: MomentDateAdapter,\n    deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n  }, {\n    provide: MAT_DATE_FORMATS,\n    useValue: formats\n  }];\n  if (options) {\n    providers.push({\n      provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS,\n      useValue: options\n    });\n  }\n  return providers;\n}\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule, provideMomentDateAdapter };","map":{"version":3,"names":["i0","InjectionToken","inject","Injectable","NgModule","DateAdapter","MAT_DATE_LOCALE","MAT_DATE_FORMATS","_rollupMoment","_rollupMoment__default","moment","MAT_MOMENT_DATE_ADAPTER_OPTIONS","providedIn","factory","MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY","useUtc","range","length","valueFunction","valuesArray","Array","i","MomentDateAdapter","_options","optional","_localeData","constructor","dateLocale","setLocale","locale","momentLocaleData","localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","format","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","getYear","date","clone","year","getMonth","month","getDate","getDayOfWeek","day","getMonthNames","style","getDateNames","getDayOfWeekNames","getYearName","getFirstDayOfWeek","getNumDaysInMonth","daysInMonth","ngDevMode","Error","result","_createMoment","isValid","today","parse","value","parseFormat","displayFormat","addCalendarYears","years","add","addCalendarMonths","addCalendarDays","days","toIso8601","deserialize","Date","isDateInstance","ISO_8601","obj","isMoment","invalid","setTime","target","hours","minutes","seconds","set","milliseconds","getHours","getMinutes","getSeconds","parseTime","addSeconds","amount","strict","utc","ɵfac","MomentDateAdapter_Factory","t","ɵprov","ɵɵdefineInjectable","token","ɵsetClassMetadata","type","MAT_MOMENT_DATE_FORMATS","dateInput","timeInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","timeOptionLabel","MomentDateModule","MomentDateModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","provide","useClass","deps","args","MatMomentDateModule","MatMomentDateModule_Factory","provideMomentDateAdapter","formats","options","useValue","push"],"sources":["C:/Users/mathe/Documents/Kids/Cadastro Local Kids/node_modules/@angular/material-moment-adapter/fesm2022/material-moment-adapter.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injectable, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\nconst MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n    providedIn: 'root',\n    factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n    return {\n        useUtc: false,\n    };\n}\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\nclass MomentDateAdapter extends DateAdapter {\n    _options = inject(MAT_MOMENT_DATE_ADAPTER_OPTIONS, {\n        optional: true,\n    });\n    // Note: all of the methods that accept a `Moment` input parameter immediately call `this.clone`\n    // on it. This is to ensure that we're working with a `Moment` that has the correct locale setting\n    // while avoiding mutating the original object passed to us. Just calling `.locale(...)` on the\n    // input would mutate the object.\n    _localeData;\n    constructor() {\n        super();\n        const dateLocale = inject(MAT_DATE_LOCALE, { optional: true });\n        this.setLocale(dateLocale || moment.locale());\n    }\n    setLocale(locale) {\n        super.setLocale(locale);\n        let momentLocaleData = moment.localeData(locale);\n        this._localeData = {\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n            longMonths: momentLocaleData.months(),\n            shortMonths: momentLocaleData.monthsShort(),\n            dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n            longDaysOfWeek: momentLocaleData.weekdays(),\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n        };\n    }\n    getYear(date) {\n        return this.clone(date).year();\n    }\n    getMonth(date) {\n        return this.clone(date).month();\n    }\n    getDate(date) {\n        return this.clone(date).date();\n    }\n    getDayOfWeek(date) {\n        return this.clone(date).day();\n    }\n    getMonthNames(style) {\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n    getDateNames() {\n        return this._localeData.dates;\n    }\n    getDayOfWeekNames(style) {\n        if (style == 'long') {\n            return this._localeData.longDaysOfWeek;\n        }\n        if (style == 'short') {\n            return this._localeData.shortDaysOfWeek;\n        }\n        return this._localeData.narrowDaysOfWeek;\n    }\n    getYearName(date) {\n        return this.clone(date).format('YYYY');\n    }\n    getFirstDayOfWeek() {\n        return this._localeData.firstDayOfWeek;\n    }\n    getNumDaysInMonth(date) {\n        return this.clone(date).daysInMonth();\n    }\n    clone(date) {\n        return date.clone().locale(this.locale);\n    }\n    createDate(year, month, date) {\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\n        // explicitly check each case so we can throw more descriptive errors.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        const result = this._createMoment({ year, month, date }).locale(this.locale);\n        // If the result isn't valid, the date must have been out of bounds for this month.\n        if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return this._createMoment().locale(this.locale);\n    }\n    parse(value, parseFormat) {\n        if (value && typeof value == 'string') {\n            return this._createMoment(value, parseFormat, this.locale);\n        }\n        return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n    format(date, displayFormat) {\n        date = this.clone(date);\n        if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\n        }\n        return date.format(displayFormat);\n    }\n    addCalendarYears(date, years) {\n        return this.clone(date).add({ years });\n    }\n    addCalendarMonths(date, months) {\n        return this.clone(date).add({ months });\n    }\n    addCalendarDays(date, days) {\n        return this.clone(date).add({ days });\n    }\n    toIso8601(date) {\n        return this.clone(date).format();\n    }\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n    deserialize(value) {\n        let date;\n        if (value instanceof Date) {\n            date = this._createMoment(value).locale(this.locale);\n        }\n        else if (this.isDateInstance(value)) {\n            // Note: assumes that cloning also sets the correct locale.\n            return this.clone(value);\n        }\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n        }\n        if (date && this.isValid(date)) {\n            return this._createMoment(date).locale(this.locale);\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return moment.isMoment(obj);\n    }\n    isValid(date) {\n        return this.clone(date).isValid();\n    }\n    invalid() {\n        return moment.invalid();\n    }\n    setTime(target, hours, minutes, seconds) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (hours < 0 || hours > 23) {\n                throw Error(`Invalid hours \"${hours}\". Hours value must be between 0 and 23.`);\n            }\n            if (minutes < 0 || minutes > 59) {\n                throw Error(`Invalid minutes \"${minutes}\". Minutes value must be between 0 and 59.`);\n            }\n            if (seconds < 0 || seconds > 59) {\n                throw Error(`Invalid seconds \"${seconds}\". Seconds value must be between 0 and 59.`);\n            }\n        }\n        return this.clone(target).set({ hours, minutes, seconds, milliseconds: 0 });\n    }\n    getHours(date) {\n        return date.hours();\n    }\n    getMinutes(date) {\n        return date.minutes();\n    }\n    getSeconds(date) {\n        return date.seconds();\n    }\n    parseTime(value, parseFormat) {\n        return this.parse(value, parseFormat);\n    }\n    addSeconds(date, amount) {\n        return this.clone(date).add({ seconds: amount });\n    }\n    /** Creates a Moment instance while respecting the current UTC settings. */\n    _createMoment(date, format, locale) {\n        const { strict, useUtc } = this._options || {};\n        return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MomentDateAdapter, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MomentDateAdapter });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MomentDateAdapter, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\n\nconst MAT_MOMENT_DATE_FORMATS = {\n    parse: {\n        dateInput: 'l',\n        timeInput: 'LT',\n    },\n    display: {\n        dateInput: 'l',\n        timeInput: 'LT',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n        timeOptionLabel: 'LT',\n    },\n};\n\nclass MomentDateModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MomentDateModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MomentDateModule, providers: [\n            {\n                provide: DateAdapter,\n                useClass: MomentDateAdapter,\n                deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n            },\n        ] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MomentDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        {\n                            provide: DateAdapter,\n                            useClass: MomentDateAdapter,\n                            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n                        },\n                    ],\n                }]\n        }] });\nclass MatMomentDateModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatMomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatMomentDateModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatMomentDateModule, providers: [provideMomentDateAdapter()] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatMomentDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [provideMomentDateAdapter()],\n                }]\n        }] });\nfunction provideMomentDateAdapter(formats = MAT_MOMENT_DATE_FORMATS, options) {\n    const providers = [\n        {\n            provide: DateAdapter,\n            useClass: MomentDateAdapter,\n            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n        },\n        { provide: MAT_DATE_FORMATS, useValue: formats },\n    ];\n    if (options) {\n        providers.push({ provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: options });\n    }\n    return providers;\n}\n\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule, provideMomentDateAdapter };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}